import Foundation

let solutions: [UInt: () -> Int] =
[
    1: {
        var sum = 0
        for i in 1..<1000 {
            if i % 3 == 0 || i % 5 == 0 {sum += i}
        }
        return sum
    },
    
    2: {
        var sum = 0
        for n in fibonacci() {
            if n > 4_000_000 {break}
            if n.isEven {sum += n}
        }
        return sum
    },
    
    3: {
        return 600851475143.primeFactors.sort{a, b in a > b}[0]
    },
    
    4: {
        var max = 0
        for a in 1...900 {
            for b in 1...900 {
                let (a1, b1) = (1000 - a, 1000 - b)
                if max / a1 > b1 {break}
                let p = a1 * b1
                if p.isPalindrome && p > max {
                    max = p
                }
            }
        }
        return max
    },
    
    5: {
        return lcm(Array(1...20))
    },
    
    6: {
        let v = Array(1...100)
        let sq: Int -> Int = {x in x * x}
        return sq(v.reduce(0, combine: +)) - v.map(sq).reduce(0, combine: +)
    },
    
    7: {
        var p = 0
        for i in 2...1000000 {
            if i.isPrime {p += 1}
            if p == 10001 {
                return i
            }
        }
        return 0
    },
    
    8: {
        let x: [Int] = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450".characters.map{Int(String($0))!}
        let k = 13
        var maxp = 0
        for i in 0..<x.count-k {
            let p = x[i..<i+k].reduce(1, combine: *)
            if p > maxp {
                maxp = p
            }
        }
        return maxp
    },
    
    9: {
        for a in 1...1000 {
            for b in 1...1000 {
                if a + b > 1000 {break}
                let c = 1000 - a - b
                if a * a + b * b == c * c {return a * b * c}
            }
        }
        return 666
    }
]


// print solutions
var n = solutions.count
var i: UInt = 0
while n > 0 {
    if let f = solutions[i] {
        print("problem \(i): \(f())")
        n -= 1
    }
    i += 1
}